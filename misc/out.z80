; Misc Output Functions.


; Output a single byte in binary on the display.
; Params:
;   e - The byte to display.
; Destroys:
;   b, a.
Out_Bin_Byte:
  ld b, 8 ; Get ready for 8 iterations.
_Out_Bin_Byte_Loop:
  call Leading_Bit_Char_Code
  call _PutC
  djnz _Out_Bin_Byte_Loop
  
  rl e  ; Restore e.
  ret 


; Output a single byte in binary as a string in memory.
; Params:
;   e  - The byte to convert to a string.
;   hl - The address in memory to place the string. 
; Returns:
;   The null terminated binary string found in e located at hl.
; Destroys:
;   b, a, hl
SOut_Bin_Byte:
  ld b, 8 ; Get ready for iterations.
_SOut_Bin_Byte_Loop:
  call Leading_Bit_Char_Code
  ld (hl), a  ; Store character in memory.
  inc hl      ; Advance pointer in memory.
  djnz _SOut_Bin_Byte_Loop

  ld (hl), $00  ; Load null character into memory.
  rl e          ; Restore e.
  ret 


; Calculate the character code of the leading bit of a byte.
; Params:
;   e - The byte to use.
; Returns:
;   The character code of the leading bit of e in a.
; Destroys:
;   a, e.
;   NOTE, e is simply rotated left one bit, not entirely destroyed.
Leading_Bit_Char_Code:
  rl e
  ld a, $30
  ret nc  ; If the leading bit is a 0, return now.
  inc a   ; Otherwise increment a, then return.
  ret 


; Output a byte in hexideciaml on the display.
; Params:
;   e - The byte to output.
; Destroys:
;   a, b, d.
Out_Hex_Byte:
  ld b, 2     ; Prepare for 2 iterations.

_Out_Hex_Byte_Loop:
  call Rotate_Nyble_Cyclic
  ld d, e
  call Out_Hex_Least_Nyble
  djnz _Out_Hex_Byte_Loop

  ret


; Output the null-terminated hex string of a byte in memory.
; Params:
;   e  - The byte to output.
;   hl - The memory address of where to output the string.
; Returns:
;   The hex string represent e in memory at hl.
; Destroys:
;   a, b, d, hl
SOut_Hex_Byte:
  ld b, 2

_SOut_Hex_Byte_Loop:
  call Rotate_Nyble_Cyclic
  ld d, e
  call SOut_Hex_Least_Nyble
  inc hl
  djnz _SOut_Hex_Byte_Loop

  ld (hl), $00
  ret 


; Rotate a byte about its nybles.
; Params:
;   e - The byte to rotate:
; Returns:
;   e rotated in e.
; Destoys:
;   e.
Rotate_Nyble_Cyclic:
  rlc e ; Perform 4 cyclic rotations.
  rlc e
  rlc e
  rlc e
  ret 


; Output a single nyble in hexidecimal on the display.
; Params:
;   d - The byte to display the least nyble of.
; Destroys:
;   a, d.
Out_Hex_Least_Nyble:
  call Mask_Least_Nyble
  call Hex_Nyble_Char_Code
  call _PutC
  ret 


; Output a single nyble in hexidecimal in memory.
; Params:
;   d  -  The byte to store the nyble of.
;   hl -  The place in memory to store the nyble's
;         corresponding character code.
; Returns:
;   d's corresponding hexidecimal character stored at hl.
; Destroys:
;   a, d.
SOut_Hex_Least_Nyble:
  call Mask_Least_Nyble
  call Hex_Nyble_Char_Code
  ld (hl), a
  ret 


; Mask d to contain only its 4 lsb's.
; Params:
;   d - The byte to mask.
; Returns:
;   The lower nyble of d in d.
; Destroys:
;   a, d.
Mask_Least_Nyble:
  ld a, d
  and $0F
  ld d, a
  ret 


; Calcuate the character code of a nyble represented 
; in hexidecimal.
; Params:
;   d - The nyble to calcualte the character code of.
;       NOTE, this requires the 4 msb's of d to be 0.
; Returns:
;   d's corresponding character code in a.
; Destroys:
;   a.
Hex_Nyble_Char_Code:
  ld a, d ; Copy d over into c.
  cp 10  ; Perform a - 10.
  jr c, _Out_Hex_Nyble_Default
  add a, $07  ; If a > 10, start by adding 7.
_Out_Hex_Nyble_Default:
  add a, $30  ; Always add $30 to character value.
  ret 